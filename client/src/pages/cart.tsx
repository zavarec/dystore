import React, { useState } from 'react';
import { NextPage } from 'next';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { toast } from 'react-toastify';
import { useRouter } from 'next/router';
import { Button } from '@/components/atoms/button';
import { ButtonVariant } from '@/components/atoms/button/button.style';
import { useLocalStorage } from '@/utils/ssr';
import { safeLocalStorage } from '@/utils/ssr';
import { CartService, OrdersService } from '@/services';

import {
  CartPageContainer,
  CartHeader,
  CartTitle,
  CartItems,
  CartItem,
  ItemImage,
  ItemInfo,
  ItemName,
  ItemPrice,
  QuantityControls,
  QuantityButton,
  QuantityInput,
  RemoveButton,
  CartSummary,
  SummaryRow,
  TotalRow,
  CheckoutSection,
  EmptyCart,
  EmptyCartIcon,
  EmptyCartTitle,
  EmptyCartDescription,
} from '@/styles/pages/cart.style';
import { NoSSR } from '@/components/atoms/no-ssr/no-ssr';

interface SimpleCartItem {
  id: number;
  productId: number;
  quantity: number;
  name: string;
  price: number;
  imageUrl: string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
const CartLoading = () => (
  <CartPageContainer>
    <div style={{ textAlign: 'center', padding: '40px' }}>
      <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</div>
    </div>
  </CartPageContainer>
);

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
const CartContent: React.FC = () => {
  const router = useRouter();
  const [isLoading] = useState(false);
  const [isCheckingOut, setIsCheckingOut] = useState(false);
  const [deliveryAddress, setDeliveryAddress] = useState('');
  const [comment, setComment] = useState('');

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  const [items, setItems, isHydrated] = useLocalStorage('simpleCart', []);

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ hydration
  const cartItems = isHydrated ? (items as SimpleCartItem[]) : [];
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleQuantityChange = (itemId: number, newQuantity: number) => {
    if (!isHydrated) return;

    if (newQuantity < 1) {
      handleRemoveItem(itemId);
      return;
    }

    const updatedCart = cartItems.map(item =>
      item.id === itemId ? { ...item, quantity: newQuantity } : item,
    );
    setItems(updatedCart);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new Event('cartUpdated'));
    }
  };

  const handleRemoveItem = (itemId: number) => {
    if (!isHydrated) return;

    const updatedCart = cartItems.filter(item => item.id !== itemId);
    setItems(updatedCart);

    toast.info('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', {
      position: 'bottom-right',
      autoClose: 2000,
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new Event('cartUpdated'));
    }
  };

  const handleClearCart = () => {
    if (!isHydrated) return;

    setItems([]);
    toast.info('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', {
      position: 'bottom-right',
      autoClose: 2000,
    });

    if (typeof window !== 'undefined') {
      window.dispatchEvent(new Event('cartUpdated'));
    }
  };

  const handleCheckout = async () => {
    if (!isHydrated || cartItems.length === 0) {
      toast.error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }

    setIsCheckingOut(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = safeLocalStorage.getItem('access_token');
      if (!token) {
        toast.error('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
        router.push('/login/login');
        return;
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π
      await Promise.all(
        cartItems.map(item =>
          CartService.addToCart({ productId: item.productId, quantity: item.quantity }),
        ),
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const payload: { deliveryAddress: string; comment?: string } = {
        deliveryAddress: deliveryAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
      };
      const trimmedComment = comment.trim();
      if (trimmedComment) {
        payload.comment = trimmedComment;
      }
      await OrdersService.createOrder(payload);

      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', {
        position: 'top-center',
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
      });

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      handleClearCart();

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push('/');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        position: 'top-center',
        autoClose: 4000,
      });
    } finally {
      setIsCheckingOut(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
  if (isHydrated && cartItems.length === 0) {
    return (
      <>
        <Head>
          <title>–ö–æ—Ä–∑–∏–Ω–∞ - DyStore</title>
          <meta
            name="description"
            content="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ Dyson."
          />
          <meta name="robots" content="noindex, nofollow" />
        </Head>

        <CartPageContainer>
          <EmptyCart>
            <EmptyCartIcon>üõí</EmptyCartIcon>
            <EmptyCartTitle>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</EmptyCartTitle>
            <EmptyCartDescription>
              –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </EmptyCartDescription>
            <Link href="/" passHref legacyBehavior>
              <Button>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º</Button>
            </Link>
          </EmptyCart>
        </CartPageContainer>
      </>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  return (
    <>
      <Head>
        <title>–ö–æ—Ä–∑–∏–Ω–∞ ({totalItems} —Ç–æ–≤–∞—Ä–æ–≤) - DyStore</title>
        <meta
          name="description"
          content={`–í –∫–æ—Ä–∑–∏–Ω–µ ${totalItems} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É ${totalPrice.toLocaleString('ru-RU')} ‚ÇΩ. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π.`}
        />
        <meta name="robots" content="noindex, nofollow" />
      </Head>

      <CartPageContainer>
        <CartHeader>
          <CartTitle>–ö–æ—Ä–∑–∏–Ω–∞ ({totalItems} —Ç–æ–≤–∞—Ä–æ–≤)</CartTitle>
        </CartHeader>

        <div
          style={{
            display: 'grid',
            gridTemplateColumns: '2fr 1fr',
            gap: '40px',
          }}
        >
          <CartItems>
            {cartItems.map(item => (
              <CartItem key={item.id}>
                <ItemImage>
                  <Image
                    src={item.imageUrl}
                    alt={item.name}
                    width={120}
                    height={120}
                    style={{ objectFit: 'contain' }}
                  />
                </ItemImage>

                <ItemInfo>
                  <ItemName>{item.name}</ItemName>
                  <ItemPrice>{item.price.toLocaleString('ru-RU')} ‚ÇΩ</ItemPrice>
                </ItemInfo>

                <QuantityControls>
                  <QuantityButton
                    onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                    disabled={isLoading}
                  >
                    ‚àí
                  </QuantityButton>
                  <QuantityInput
                    type="number"
                    value={item.quantity}
                    onChange={e => handleQuantityChange(item.id, parseInt(e.target.value) || 1)}
                    min="1"
                    disabled={isLoading}
                  />
                  <QuantityButton
                    onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                    disabled={isLoading}
                  >
                    +
                  </QuantityButton>
                </QuantityControls>

                <RemoveButton
                  onClick={() => handleRemoveItem(item.id)}
                  disabled={isLoading}
                  aria-label={`–£–¥–∞–ª–∏—Ç—å ${item.name} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`}
                >
                  ‚úï
                </RemoveButton>
              </CartItem>
            ))}
          </CartItems>

          <CartSummary>
            <h3>–ò—Ç–æ–≥–æ</h3>
            <div style={{ display: 'flex', flexDirection: 'column', gap: 12, marginBottom: 16 }}>
              <label style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
                <span>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                <input
                  type="text"
                  placeholder="–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                  value={deliveryAddress}
                  onChange={e => setDeliveryAddress(e.target.value)}
                  disabled={isCheckingOut || isLoading}
                  style={{ padding: 10, border: '1px solid #e5e7eb', borderRadius: 8 }}
                />
              </label>
              <label style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
                <span>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
                <textarea
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏"
                  value={comment}
                  onChange={e => setComment(e.target.value)}
                  disabled={isCheckingOut || isLoading}
                  rows={3}
                  style={{
                    padding: 10,
                    border: '1px solid #e5e7eb',
                    borderRadius: 8,
                    resize: 'vertical',
                  }}
                />
              </label>
            </div>
            <SummaryRow>
              <span>–¢–æ–≤–∞—Ä—ã ({totalItems})</span>
              <span>{totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</span>
            </SummaryRow>
            <SummaryRow>
              <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
              <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
            </SummaryRow>
            <TotalRow>
              <span>–ö –æ–ø–ª–∞—Ç–µ</span>
              <span>{totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</span>
            </TotalRow>
            <CheckoutSection>
              <Button
                onClick={handleCheckout}
                disabled={isCheckingOut || isLoading}
                size="large"
                fullWidth
                variant={ButtonVariant.PRIMARY}
              >
                {isCheckingOut ? '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
              </Button>
              <div style={{ marginTop: '16px' }}>
                <Link href="/" passHref legacyBehavior>
                  <Button variant={ButtonVariant.OUTLINE} size="medium" fullWidth>
                    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                  </Button>
                </Link>
              </div>
            </CheckoutSection>
          </CartSummary>
        </div>
      </CartPageContainer>
    </>
  );
};

const CartPage: NextPage = () => {
  return (
    <NoSSR fallback={<CartLoading />}>
      <CartContent />
    </NoSSR>
  );
};

export const getStaticProps: GetStaticProps = async ({ locale }) => {
  return {
    props: {
      ...(await serverSideTranslations(locale ?? 'ru', ['common'])),
    },
  };
};

export default CartPage;
