import { PromotionsService } from '@/services/promotion.service';
import { LayoutService, PageSectionDTO } from '@/services/layout.service';
import { Promotion, PromotionSlot } from '@/types/models/promotion.model';
import { createAsyncThunk } from '@reduxjs/toolkit';

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ –ø–æ —Å–ª–æ—Ç—É
export const fetchActivePromosBySlot = createAsyncThunk<
  Promotion[] | Promotion | null,
  PromotionSlot
>('promotions/fetchActiveBySlot', async (slot, thunkAPI) => {
  try {
    return await PromotionsService.getActiveBySlot(slot);
  } catch (err: any) {
    return thunkAPI.rejectWithValue(err.message);
  }
});

// üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ–º–æ
export const createPromotion = createAsyncThunk<Promotion, Partial<Promotion>>(
  'promotions/create',
  async (dto, thunkAPI) => {
    try {
      return await PromotionsService.createPromotion(dto);
    } catch (err: any) {
      return thunkAPI.rejectWithValue(err.message);
    }
  },
);

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ
export const updatePromotion = createAsyncThunk<Promotion, { id: number; dto: Partial<Promotion> }>(
  'promotions/update',
  async ({ id, dto }, thunkAPI) => {
    try {
      return await PromotionsService.updatePromotion(id, dto);
    } catch (err: any) {
      return thunkAPI.rejectWithValue(err.message);
    }
  },
);

// üîπ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ
export const deletePromotion = createAsyncThunk<number, number>(
  'promotions/delete',
  async (id, thunkAPI) => {
    try {
      await PromotionsService.removePromotion(id);
      return id;
    } catch (err: any) {
      return thunkAPI.rejectWithValue(err.message);
    }
  },
);

// üîπ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (layout)
export const fetchHomeLayoutSections = createAsyncThunk<PageSectionDTO[], void>(
  'promotions/fetchHomeLayoutSections',
  async (_, thunkAPI) => {
    try {
      return await LayoutService.getHome();
    } catch (err: any) {
      return thunkAPI.rejectWithValue(err.message);
    }
  },
);
