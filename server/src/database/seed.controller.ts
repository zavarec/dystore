import { Controller, Post, Get, HttpException, HttpStatus } from '@nestjs/common';
import { SeedService } from './seed.service';
import { PrismaService } from './prisma.service';

@Controller('seed')
export class SeedController {
  constructor(
    private readonly seedService: SeedService,
    private readonly prisma: PrismaService
  ) {}

  @Get('test')
  async testConnection() {
    try {
      console.log('üîß –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const result = await this.prisma.$queryRaw`SELECT 1 as test`;
      console.log('üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç:', result);
      return { message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç', data: result };
    } catch (error) {
      console.error('üîß –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
      throw new HttpException(
        { message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', error: error.message },
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  @Get('categories-test')
  async testCategories() {
    try {
      console.log('üîß –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const category = await this.prisma.category.create({
        data: {
          name: '–¢–µ—Å—Ç',
          slug: 'test-' + Date.now(),
          image: 'https://example.com/test.jpg',
        },
      });
      console.log('üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', category);
      return { message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞', category };
    } catch (error) {
      console.error('üîß –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw new HttpException(
        { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', error: error.message },
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  @Post('database')
  async seedDatabase() {
    try {
      console.log('üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: –Ω–∞—á–∏–Ω–∞—é seed...');
      const result = await this.seedService.seedDatabase();
      console.log('üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: seed –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return result;
    } catch (error) {
      console.error('üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: –æ—à–∏–±–∫–∞ –≤ seed controller:', error);
      console.error('üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: error message:', error.message);
      console.error('üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: error stack:', error.stack);
      
      throw new HttpException(
        {
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          error: error.message,
          details: error.stack
        },
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }
}
