import { Category, PrismaClient, Product, Role } from "@prisma/client";
import * as bcrypt from "bcrypt";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  console.log("üßπ –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...");
  await prisma.orderItem.deleteMany({});
  await prisma.order.deleteMany({});
  await prisma.cartItem.deleteMany({});
  await prisma.cart.deleteMany({});
  await prisma.product.deleteMany({});
  await prisma.category.deleteMany({});
  await prisma.user.deleteMany({});
  console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log("üìÇ –°–æ–∑–¥–∞—é –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
  const categories = await Promise.all([
    prisma.category.create({
      data: {
        name: "–ü—ã–ª–µ—Å–æ—Å—ã",
        slug: "vacuum-cleaners",
        image:
          "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/home-page/homepage-category-tiles-floorcare.jpg",
      },
    }),
    prisma.category.create({
      data: {
        name: "–£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏",
        slug: "hair-care",
        image:
          "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/home-page/homepage-category-tiles-hair-care-2.jpg",
      },
    }),
    prisma.category.create({
      data: {
        name: "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
        slug: "climate-tech",
        image:
          "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/home-page/homepage-category-tiles-air-treatment.jpg",
      },
    }),
    prisma.category.create({
      data: {
        name: "–ù–∞—É—à–Ω–∏–∫–∏",
        slug: "headphones",
        image:
          "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/home-page/homepage-category-tiles-headphones-new.jpg",
      },
    }),
    prisma.category.create({
      data: {
        name: "–û—Å–≤–µ—â–µ–Ω–∏–µ",
        slug: "lighting",
        image:
          "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/home-page/homepage-category-tiles-lighting.jpg",
      },
    }),
  ]);

  const [vacuums, hairCare, climate, headphones, lighting] = categories;
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${categories.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

  // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log("üìÅ –°–æ–∑–¥–∞—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
  const subcategoriesMap: Record<number, string[]> = {
    [vacuums.id]: [
      "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –ø—ã–ª–µ—Å–æ—Å—ã",
      "–†–æ–±–æ—Ç—ã-–ø—ã–ª–µ—Å–æ—Å—ã",
      "–ü—Ä–æ–≤–æ–¥–Ω—ã–µ –ø—ã–ª–µ—Å–æ—Å—ã",
      "–ú–æ—é—â–∏–µ –ø—ã–ª–µ—Å–æ—Å—ã",
    ],
    [hairCare.id]: [
      "–§–µ–Ω—ã Dyson Supersonic",
      "–ú—É–ª—å—Ç–∏—Å—Ç–∞–π–ª–µ—Ä—ã Dyson Airwrap",
      "–í—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏ Dyson Corrale",
      "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–æ–ª–æ—Å",
    ],
    [climate.id]: ["–û—á–∏—Å—Ç–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞", "–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞", "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã"],
    [headphones.id]: ["–ù–∞—É—à–Ω–∏–∫–∏ —Å ANC", "–ü—Ä–µ–º–∏—É–º-–Ω–∞—É—à–Ω–∏–∫–∏"],
    [lighting.id]: ["–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –ª–∞–º–ø—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –ª–∞–º–ø—ã"],
  };

  const createdSubcategories: Category[] = [];

  for (const [parentIdStr, subNames] of Object.entries(subcategoriesMap)) {
    const parentId = Number(parentIdStr);
    for (const subName of subNames) {
      // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è slug
      const cyrillicMap: Record<string, string> = {
        –∞: "a",
        –±: "b",
        –≤: "v",
        –≥: "g",
        –¥: "d",
        –µ: "e",
        —ë: "yo",
        –∂: "zh",
        –∑: "z",
        –∏: "i",
        –π: "y",
        –∫: "k",
        –ª: "l",
        –º: "m",
        –Ω: "n",
        –æ: "o",
        –ø: "p",
        —Ä: "r",
        —Å: "s",
        —Ç: "t",
        —É: "u",
        —Ñ: "f",
        —Ö: "h",
        —Ü: "ts",
        —á: "ch",
        —à: "sh",
        —â: "sch",
        —ä: "",
        —ã: "y",
        —å: "",
        —ç: "e",
        —é: "yu",
        —è: "ya",
      };

      const slug = subName
        .toLowerCase()
        .split("")
        .map((char) => cyrillicMap[char] || char)
        .join("")
        .replace(/\s+/g, "-")
        .replace(/[^\w-]/g, "")
        .replace(/-+/g, "-")
        .replace(/^-|-$/g, "");

      const sub = await prisma.category.create({
        data: {
          name: subName,
          slug: slug,
          parentId,
          image: null,
        },
      });
      createdSubcategories.push(sub);
    }
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdSubcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  console.log("üõçÔ∏è –°–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä—ã...");
  const allProducts: Product[] = [];

  const imageMap: Record<number, string> = {
    [vacuums.id]:
      "http://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/hero/448799-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920",
    [hairCare.id]:
      "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/primary/598976-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920",
    [climate.id]:
      "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/hero-locale/en_GB/545814-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920",
    [headphones.id]:
      "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/hero-locale/en_GB/759558-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920",
    [lighting.id]:
      "https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/hero/529476-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920",
  };

  for (const sub of createdSubcategories) {
    const baseName = sub.name;
    const parent = categories.find((p) => p.id === sub.parentId);
    const imageUrl = parent ? imageMap[parent.id] : "";

    const unique = await Promise.all(
      Array.from({ length: 5 }).map((_, i) =>
        prisma.product.create({
          data: {
            name: `${baseName} Model ${i + 1}`,
            shortDescription: `${baseName} –∫—Ä–∞—Ç–∫–æ: –º–æ–¥–µ–ª—å ${i + 1}`,
            description: `–û–ø–∏—Å–∞–Ω–∏–µ ${baseName} ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å ${i + 1} —Å –æ—Å–æ–±—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.`,
            price: 29990 + i * 2000,
            stock: 10 + i,
            imageUrl,
            categoryId: sub.id,
            isFeatured: i % 2 === 0,
            popularity: 100 + i * 150,
          },
        }),
      ),
    );

    const copies = await Promise.all(
      unique.map((p) =>
        prisma.product.create({
          data: {
            name: `${p.name} Copy`,
            shortDescription: p.shortDescription,
            description: p.description,
            price: p.price,
            stock: p.stock,
            imageUrl: p.imageUrl || "",
            categoryId: p.categoryId,
            isFeatured: p.isFeatured,
            popularity: p.popularity,
          },
        }),
      ),
    );

    allProducts.push(...unique, ...copies);
  }

  const adminEmail = "admin@dystore.local";

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
  const admin = await prisma.user.findUnique({ where: { email: adminEmail } });

  if (!admin) {
    const hashedPassword = await bcrypt.hash("SuperSecret123!", 10);

    await prisma.user.create({
      data: {
        email: adminEmail,
        phone: "79990000000",
        password: hashedPassword,
        name: "Super Admin",
        role: Role.ADMIN,
      },
    });

    console.log(`‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: ${adminEmail} / SuperSecret123!`);
  } else {
    console.log("‚ÑπÔ∏è –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }

  console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   üìÇ –û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
  console.log(`   üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${createdSubcategories.length}`);
  console.log(`   üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  // eslint-disable-next-line @typescript-eslint/no-misused-promises
  .finally(async () => {
    await prisma.$disconnect();
  });
