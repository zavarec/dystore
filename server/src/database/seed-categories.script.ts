import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –¢–∏–ø—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
interface CategoryData {
  id: number;
  name: string;
  slug: string;
  image?: string;
  children?: CategoryData[];
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
const categoryHierarchy: CategoryData[] = [
  {
    id: 1,
    name: '–ù–æ–≤–∏–Ω–∫–∏',
    slug: 'novinki',
    image: '/images/categories/new.jpg',
    children: [],
  },
  {
    id: 2,
    name: '–ü—ã–ª–µ—Å–æ—Å—ã',
    slug: 'pylesosy',
    image:
      'https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/hero/447038-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920',
    children: [
      { id: 21, name: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –ø—ã–ª–µ—Å–æ—Å—ã', slug: 'besprovodnye-pylesosy' },
      {
        id: 22,
        name: '–¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–µ –ø—ã–ª–µ—Å–æ—Å—ã',
        slug: 'tsilindricheskie-pylesosy',
      },
      {
        id: 23,
        name: '–î–æ–∫-—Å—Ç–∞–Ω—Ü–∏–∏, –Ω–∞—Å–∞–¥–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        slug: 'dok-stantsii-nasadki-aksessuary',
      },
    ],
  },
  {
    id: 3,
    name: '–£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏',
    slug: 'ukhod-za-volosami',
    image:
      'https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/products/primary/601857-01.png?$responsive$&cropPathE=desktop&fit=stretch,1&wid=1920',
    children: [
      { id: 31, name: '–§–µ–Ω—ã –¥–ª—è –≤–æ–ª–æ—Å', slug: 'feny-dlya-volos' },
      { id: 32, name: '–°—Ç–∞–π–ª–µ—Ä—ã', slug: 'staylery' },
      { id: 33, name: '–í—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏', slug: 'vypryamiteli' },
      {
        id: 34,
        name: '–ß–µ—Ö–ª—ã, —Ä–∞—Å—á–µ—Å–∫–∏ –∏ –Ω–∞—Å–∞–¥–∫–∏',
        slug: 'chekhly-rascheski-nasadki',
      },
      { id: 35, name: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è', slug: 'personalizatsiya-hair' },
    ],
  },
  {
    id: 4,
    name: '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    slug: 'klimaticheskaya-tekhnika',
    image:
      'https://dyson-h.assetsadobe2.com/is/image/content/dam/dyson/images/gallery/home/air-treatment/fan-heaters/cf1/Web_739_Gallery_Images_1.jpg?cropPathE=desktop&fit=stretch,1&wid=2304',
    children: [
      {
        id: 41,
        name: '–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª–∏-–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏',
        slug: 'uvlazhniteli-ochistiteli',
      },
      { id: 42, name: '–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª–∏', slug: 'uvlazhniteli' },
      { id: 43, name: '–û—á–∏—Å—Ç–∏—Ç–µ–ª–∏', slug: 'ochistiteli' },
      { id: 44, name: '–§–∏–ª—å—Ç—Ä—ã', slug: 'filtry' },
    ],
  },
  {
    id: 5,
    name: '–°—É—à–∏–ª–∫–∏ –¥–ª—è —Ä—É–∫',
    slug: 'sushilki-dlya-ruk',
    image: '/images/categories/hands.jpg',
    children: [
      { id: 51, name: '–°—É—à–∏–ª–∫–∏ –¥–ª—è —Ä—É–∫ 9kJ', slug: 'sushilki-9kj' },
      { id: 52, name: '–°—É—à–∏–ª–∫–∏ –¥–ª—è —Ä—É–∫ V', slug: 'sushilki-v' },
      {
        id: 53,
        name: '–°—É—à–∏–ª–∫–∏ –¥–ª—è —Ä—É–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Å–º–µ—Å–∏—Ç–µ–ª—å Wash+Dry',
        slug: 'sushilki-wash-dry',
      },
    ],
  },
];

async function createCategoryWithChildren(
  categoryData: CategoryData,
  parentId: number | null = null,
): Promise<void> {
  // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const category = await prisma.category.create({
    data: {
      name: categoryData.name,
      slug: categoryData.slug,
      // image: categoryData.image,
      parentId: parentId,
    },
  });

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})`);

  // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (categoryData.children && categoryData.children.length > 0) {
    for (const child of categoryData.children) {
      await createCategoryWithChildren(child, category.id);
    }
  }
}

async function seedCategories() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    // –£–¥–∞–ª—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ ‚Üí –∑–∞–∫–∞–∑—ã ‚Üí —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω ‚Üí –∫–æ—Ä–∑–∏–Ω—ã ‚Üí –ø—Ä–æ–¥—É–∫—Ç—ã ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await prisma.orderItem.deleteMany({});
    console.log('   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ —É–¥–∞–ª–µ–Ω—ã');

    await prisma.order.deleteMany({});
    console.log('   ‚úÖ –ó–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã');

    await prisma.cartItem.deleteMany({});
    console.log('   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω —É–¥–∞–ª–µ–Ω—ã');

    await prisma.cart.deleteMany({});
    console.log('   ‚úÖ –ö–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã');

    await prisma.product.deleteMany({});
    console.log('   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã');

    await prisma.category.deleteMany({});
    console.log('   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for (const rootCategory of categoryHierarchy) {
      await createCategoryWithChildren(rootCategory, null);
    }

    console.log('‚úÖ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalCategories = await prisma.category.count();
    const rootCategories = await prisma.category.count({
      where: { parentId: null },
    });
    const childCategories = totalCategories - rootCategories;

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`);
    console.log(`   –ö–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${rootCategories}`);
    console.log(`   –î–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${childCategories}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
    console.log('\nüå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    const categories = await prisma.category.findMany({
      include: {
        children: {
          include: {
            children: true,
          },
        },
      },
    });

    const printTree = (
      cats: Array<{
        id: number;
        name: string;
        slug: string;
        parentId: number | null;
      }>,
      parentId: number | null = null,
      level = 0,
    ) => {
      const filtered = cats.filter((c) => c.parentId === parentId);
      for (const cat of filtered) {
        const indent = '  '.repeat(level);
        console.log(`${indent}‚îú‚îÄ ${cat.name} (${cat.slug})`);
        printTree(cats, cat.id, level + 1);
      }
    };

    printTree(categories);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  await seedCategories();
  await prisma.$disconnect();
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch((error) => {
    console.error(error);
    process.exit(1);
  });
}

export { seedCategories, categoryHierarchy };
export default main;
