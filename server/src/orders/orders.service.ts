import {
  Injectable,
  BadRequestException,
  NotFoundException,
} from "@nestjs/common";
import { PrismaService } from "../database/prisma.service";
import { Order, OrderStatus, OrderItem } from "@prisma/client";
import { CreateOrderDto } from "./dto/create-order.dto";
import { CartService } from "../cart/cart.service";
import { TelegramService } from "../telegram/telegram.service";

type OrderWithItems = Order & {
  items: (OrderItem & {
    product: any;
  })[];
  user?: any;
};

@Injectable()
export class OrdersService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly cartService: CartService,
    private readonly telegramService: TelegramService,
  ) {}

  async createOrder(
    userId: string,
    createOrderDto: CreateOrderDto,
  ): Promise<OrderWithItems> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cart = await this.cartService.getCartWithItems({ userId });

    if (!cart || !cart.items || cart.items.length === 0) {
      throw new BadRequestException("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    let totalPrice = 0;
    const orderItems: Array<{
      productId: number;
      quantity: number;
      priceAtPurchase: number;
    }> = [];

    for (const cartItem of cart.items) {
      const currentPrice = Number(cartItem.product.price);
      const itemTotal = currentPrice * cartItem.quantity;
      totalPrice += itemTotal;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
      if (cartItem.product.stock < cartItem.quantity) {
        throw new BadRequestException(
          `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${cartItem.product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${cartItem.product.stock}`,
        );
      }

      orderItems.push({
        productId: cartItem.productId,
        quantity: cartItem.quantity,
        priceAtPurchase: currentPrice,
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const order = await this.prisma.order.create({
      data: {
        userId,
        totalPrice,
        status: OrderStatus.PENDING,
        deliveryAddress: createOrderDto.deliveryAddress,
        comment: createOrderDto.comment,
        items: {
          create: orderItems,
        },
      },
      include: {
        items: {
          include: {
            product: true,
          },
        },
        user: true,
      },
    });

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await this.cartService.clearCartByIdentity({ userId });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (best-effort, –Ω–µ –ª–æ–º–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–∫–∞–∑–∞)
    const lines: string[] = [];
    lines.push(`üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}`);
    lines.push(`–°—Ç–∞—Ç—É—Å: ${order.status}`);
    if (order.user?.name || order.user?.phone || order.user?.email) {
      const who = [order.user?.name, order.user?.phone, order.user?.email]
        .filter(Boolean)
        .join(" ¬∑ ");
      lines.push(`–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${who}`);
    }
    if (order.deliveryAddress) {
      lines.push(`–ê–¥—Ä–µ—Å: ${order.deliveryAddress}`);
    }
    if (order.comment) {
      lines.push(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}`);
    }
    lines.push("–¢–æ–≤–∞—Ä—ã:");
    for (const item of order.items) {
      const productName = item.product?.name ?? `#${item.productId}`;
      lines.push(
        `‚Ä¢ ${productName} √ó ${item.quantity} = ${item.priceAtPurchase * item.quantity}`,
      );
    }
    lines.push(`–ò—Ç–æ–≥–æ: ${order.totalPrice}`);

    const message = lines.join("\n");
    this.telegramService.sendMessage(message).catch(() => undefined);

    return order;
  }

  async findUserOrders(userId: string): Promise<OrderWithItems[]> {
    return this.prisma.order.findMany({
      where: { userId },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });
  }

  async findAll(): Promise<OrderWithItems[]> {
    return this.prisma.order.findMany({
      include: {
        items: {
          include: { product: true },
        },
        user: true,
      },
      orderBy: { createdAt: "desc" },
    });
  }

  async findOne(id: number): Promise<OrderWithItems> {
    const order = await this.prisma.order.findUnique({
      where: { id },
      include: {
        items: {
          include: {
            product: true,
          },
        },
        user: true,
      },
    });

    if (!order) {
      throw new NotFoundException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    return order;
  }

  async findUserOrder(
    userId: string,
    orderId: number,
  ): Promise<OrderWithItems> {
    const order = await this.prisma.order.findFirst({
      where: { id: orderId, userId },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    if (!order) {
      throw new NotFoundException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    return order;
  }

  async updateOrderStatus(
    id: number,
    status: OrderStatus,
  ): Promise<OrderWithItems> {
    return this.prisma.order.update({
      where: { id },
      data: { status },
      include: {
        items: {
          include: {
            product: true,
          },
        },
        user: true,
      },
    });
  }
}
