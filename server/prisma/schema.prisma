generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Шрифты для промо
enum PromoFont {
  INTER
  ROBOTO
  MONTSERRAT
  POPPINS
  NUNITO_SANS
}

// Статус корзиныы
enum CartStatus {
  ACTIVE
  MERGED
  CHECKED_OUT
  ABANDONED
}

// Роли пользователей
enum Role {
  DIRECTOR
  MANAGER
  CUSTOMER
}

// Пользователи
model User {
  id        String   @id @default(uuid())
  phone     String?  @unique
  email     String?  @unique
  password  String?
  name      String?
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Добавить аватар
  avatarId String?
  avatar   File?   @relation("UserAvatars", fields: [avatarId], references: [id], onDelete: SetNull)

  // Связи
  carts               Cart[]
  orders              Order[]
  createdPromotions   Promotion[]
  createdPageSections PageSection[]
  PromoSection        PromoSection[]
  uploadedFiles       File[] // Файлы загруженные пользователем

  @@index([email])
  @@index([phone])
  @@map("users")
}

// Категории
model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  parentId    Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  imageId String?
  image   File?   @relation("CategoryImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Связи
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
}

// Продукты
model Product {
  id                 Int      @id @default(autoincrement())
  name               String
  slug               String   @unique
  description        String?
  shortDescription   String?
  price              Float
  stock              Int      @default(0)
  categoryId         Int
  isFeatured         Boolean  @default(false)
  popularity         Int      @default(0)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  dimensionsImageUrl String? // картинка габаритов (одна, со “стиком” и “щеткой”)

  // Заменить imageUrl на связь с файлами
  mainImageId       String?
  mainImage         File?   @relation("ProductImages", fields: [mainImageId], references: [id], onDelete: SetNull)
  dimensionsImageId String?
  dimensionsImage   File?   @relation("ProductDimensionsImages", fields: [dimensionsImageId], references: [id], onDelete: SetNull)

  media ProductMedia[]

  // Связи
  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  promotions Promotion[]

  boxItems ProductBoxItem[]
  specs    ProductSpec[]

  @@index([categoryId])
  @@index([isFeatured])
  @@index([popularity])
}

model Accessory {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  name        String
  description String?
  imageUrl    String?
  imageId     String?
  image       File?   @relation("AccessoryImages", fields: [imageId], references: [id], onDelete: SetNull)

  products ProductBoxItem[]
}

model ProductBoxItem {
  id          Int     @id @default(autoincrement())
  productId   Int
  accessoryId Int? // ссылочный аксессуар из справочника
  // Если иногда нужен «кастомный» предмет, которого нет в справочнике:
  customName  String?
  description String?
  qty         Int     @default(1)
  order       Int     @default(0)

  customImageUrl String?
  customImageId  String?
  customImage    File?   @relation("ProductBoxItemImages", fields: [customImageId], references: [id], onDelete: SetNull)

  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  accessory Accessory? @relation(fields: [accessoryId], references: [id], onDelete: SetNull)

  @@index([productId, order])
  @@index([accessoryId])
}

enum SpecType {
  STRING
  NUMBER
  BOOLEAN
}

model SpecAttribute {
  id    Int      @id @default(autoincrement())
  key   String   @unique // e.g. "run_time", "suction_power", "bin_volume"
  label String // "Maximum run time"
  unit  String? // "min", "W", "L", "kg", "mm", "%"
  type  SpecType @default(STRING)
  group String? // "Performance", "Dimensions", "Filtration"
  order Int      @default(0)

  specs ProductSpec[]

  @@index([group, order])
}

model ProductSpec {
  id           Int      @id @default(autoincrement())
  productId    Int
  attributeId  Int
  valueString  String?
  valueNumber  Float?
  valueBool    Boolean?
  unitOverride String?
  order        Int      @default(0)

  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute SpecAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@index([productId, order])
  @@index([attributeId])
}

// Корзины
model Cart {
  id        Int        @id @default(autoincrement())
  userId    String?
  token     String     @unique @default(uuid()) // OK для чистой БД
  status    CartStatus @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Связи
  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@index([userId])
  @@map("carts")
}

// Элементы корзины
model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  // Связи
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Заказы
model Order {
  id              Int         @id @default(autoincrement())
  userId          String
  totalPrice      Float
  status          OrderStatus @default(PENDING)
  deliveryAddress String?
  comment         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Связи
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@index([userId])
  @@index([status])
  @@map("orders")
}

// Элементы заказа
model OrderItem {
  id              Int   @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Float

  // Связи
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enum для статуса заказа
enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Промо-слоты
enum PromotionSlot {
  HERO
  PRODUCT_OF_DAY
  FEATURED
  CUSTOM
}

// Промо
model Promotion {
  id        Int           @id @default(autoincrement())
  slot      PromotionSlot
  productId Int?
  product   Product?      @relation(fields: [productId], references: [id])
  title     String?
  subtitle  String?
  ctaText   String?
  ctaLink   String?

  isPublished Boolean  @default(false)
  startAt     DateTime
  endAt       DateTime
  position    Int      @default(0)
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // МЕДИА
  bgImageId String?
  bgImage   File?   @relation("PromotionBgImage", fields: [bgImageId], references: [id], onDelete: SetNull)

  bgVideoId  String?
  bgVideo    File?   @relation("PromotionBgVideo", fields: [bgVideoId], references: [id], onDelete: SetNull)
  bgImageUrl String?
  bgVideoUrl String?

  // Стили
  font       PromoFont? @default(NUNITO_SANS)
  titleColor String?
  textColor  String?
  ctaBg      String?
  ctaColor   String?

  @@index([slot, isPublished, startAt, endAt])
  @@index([slot, position])
}

// Ключи страниц и секций для конфигурирования главной
enum PageKey {
  HOME
}

enum SectionKey {
  PRODUCT_OF_DAY
  FEATURED
  CUSTOM
  HITS
}

model PageSection {
  id          Int        @id @default(autoincrement())
  page        PageKey
  key         SectionKey
  title       String?
  isEnabled   Boolean    @default(true)
  position    Int        @default(0)
  settings    Json?
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([page, key])
  @@index([page, isEnabled, position])
}

// promo секции для категорий
enum PromoVariant {
  BANNER
  TEXT_STRIP
  TEXT_QUOTE
  GRID
  STRIP_USP
  IMAGE_PAIR
  HEADLINE_STRIP
  CAROUSEL // <— добавили
}

enum PromoSlot {
  ABOVE_HERO
  BELOW_HERO
  ABOVE_SUBCATEGORIES
  BELOW_SUBCATEGORIES
  ABOVE_FILTERS
  BELOW_FILTERS
  ABOVE_PRODUCTS
  BETWEEN_PRODUCTS
  BELOW_PRODUCTS

  // PDP (product page)
  PDP_FEATURES
  PDP_BELOW_GALLERY
  PDP_BELOW_SPECS
  PDP_BELOW_ACCESSORY
}

// Положение контента в секции
enum ContentSide {
  LEFT
  RIGHT
  CENTER
}

enum PromoEntityType {
  CATEGORY_PROMO_SECTION
  // на будущее: PRODUCT_PROMO_SECTION, etc.
}

// Куда рендерим
enum PromoPageType {
  CATEGORY
  PRODUCT
  LANDING
  STATIC
}

// Универсальный placement
model PromoPlacement {
  id Int @id @default(autoincrement())

  pageType PromoPageType
  entityId String // slug категории / slug товара / ключ страницы
  slot     PromoSlot
  order    Int           @default(0)
  isActive Boolean       @default(true)

  promoSectionId Int? // <— временно опциональный
  promoSection   PromoSection? @relation(fields: [promoSectionId], references: [id], onDelete: Cascade)

  // Локальные (перекрывающие) настройки для конкретной страницы
  fullWidth    Boolean?
  marginTop    Int?
  marginBottom Int?
  bgColor      String?
  contentSide  ContentSide?
  zIndex       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pageType, entityId, slot, isActive, order])
}

model PromoSection {
  id Int @id @default(autoincrement())

  variant PromoVariant

  // контент
  title    String?
  subtitle String?
  imageUrl String?
  videoUrl String?
  ctaText  String?
  ctaLink  String?

  imageId String?
  image   File?   @relation("PromoSectionImage", fields: [imageId], references: [id], onDelete: SetNull)
  videoId String?
  video   File?   @relation("PromoSectionVideo", fields: [videoId], references: [id], onDelete: SetNull)

  // стили
  font        PromoFont?   @default(NUNITO_SANS)
  titleColor  String?
  textColor   String?
  ctaBg       String?
  ctaColor    String?
  bgColor     String?
  contentSide ContentSide?
  heightPx    Int?

  // отступы и базовый размер шрифта для контента
  paddingTopPx      Int?
  paddingBottomPx   Int?
  contentFontSizePx Int?
  titleFontSizePx   Int?

  // <— универсальный JSON-пейлоад для вариант-специфичного контента (слайды и пр.)
  content Json?

  // тайминг и статус
  startsAt DateTime?
  endsAt   DateTime?
  isActive Boolean   @default(true)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  placements PromoPlacement[]
}

// SEO
enum SeoPageType {
  CATEGORY
  PRODUCT
  LANDING
  STATIC
}

model SeoMeta {
  id       Int         @id @default(autoincrement())
  pageType SeoPageType
  entityId String
  locale   String      @default("ru")

  // базовые мета
  title       String?
  description String?
  keywords    String?

  // canonical/robots
  canonical String?
  robots    String?

  // Open Graph / Twitter
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  twitterCard   String?

  // расширенные
  structuredData Json?
  hreflang       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pageType, entityId, locale])
  @@index([pageType, entityId, locale])
}

// Типы файлов
enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

// Статус обработки файла  
enum FileStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
}

model File {
  id         String     @id @default(uuid())
  filename   String // Оригинальное имя файла
  storedName String // Имя файла в хранилище
  path       String // Путь к файлу
  url        String? // Публичный URL (для CDN)
  mimetype   String // MIME тип
  size       Int // Размер в байтах
  type       FileType // Тип файла
  status     FileStatus @default(UPLOADING)

  // Метаданные
  width       Int? // Для изображений
  height      Int? // Для изображений
  duration    Int? // Для видео/аудио в секундах
  alt         String? // Alt text для изображений
  description String? // Описание файла

  // Связи
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  // Связи с другими сущностями
  categoryImages Category[] @relation("CategoryImages")
  productImages  Product[]  @relation("ProductImages")
  userAvatars    User[]     @relation("UserAvatars")

  // ПРОМО (исправлено)
  promotionBgImage Promotion[] @relation("PromotionBgImage")
  promotionBgVideo Promotion[] @relation("PromotionBgVideo")

  promoSectionImage PromoSection[] @relation("PromoSectionImage")
  promoSectionVideo PromoSection[] @relation("PromoSectionVideo")

  accessoryImages    Accessory[]      @relation("AccessoryImages")
  productDimensions  Product[]        @relation("ProductDimensionsImages")
  productBoxItemImgs ProductBoxItem[] @relation("ProductBoxItemImages")
  productMedia       ProductMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploadedById])
  @@index([type, status])
  @@index([mimetype])
  @@map("files")
}

enum ProductMediaType {
  IMAGE
  VIDEO
}

model ProductMedia {
  id        Int              @id @default(autoincrement())
  productId Int
  fileId    String
  kind      ProductMediaType @default(IMAGE)
  role      String? // MAIN / GALLERY / DIMENSIONS / BRAND
  order     Int              @default(0)
  alt       String?
  title     String?
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  file      File             @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
  @@index([productId, kind, order])
}
